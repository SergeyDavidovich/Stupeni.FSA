@page "/booking"
@using Microsoft.Extensions.Localization
@using Newtonsoft.Json
@using Stupeni.FSA.Blazor.Components
@using Stupeni.FSA.Blazor.Models
@using Stupeni.FSA.Booking
@using Stupeni.FSA.Booking.Dto
@using Stupeni.FSA.Flights
@using System.Threading
@using Stupeni.FSA.Localization
@using System.Text.Json
@using System.Text.Json.Serialization
@using Volo.Abp.AspNetCore.Components.Notifications
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.MultiTenancy
@using Stupeni.FSA.Flights.Dto
@using Volo.Abp.Users
@attribute [Authorize]
@inherits FSAComponentBase
@inject ICurrentUser currentUser
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IFlightApplicationService flightApplicationService
@inject IBookingApplicationService bookingApplicationService
@inject IUiNotificationService notificationService
@inject IUiMessageService messageService
@inject IStringLocalizer<FSAResource> localizer

<MudContainer Class="d-flex flex-column align-center gap-4">
    <RouteBuilder @ref="routeBuilder" SearchFlightOnClicked="SearchFlightOnClicked"></RouteBuilder>
    <FlightsBooking Flights="@flights" BookButtonOnClicked="BookFlightsAsync"></FlightsBooking>
</MudContainer>

@code {
    RouteBuilder routeBuilder;
    private List<FlightDto> flights = new List<FlightDto>();

    private async Task SearchFlightOnClicked(BookingData data)
    {
        ClearFlightsListIfAny();

        var httpClient = new HttpClient();

        string query = "https://localhost:44389/api/Flights?"
                        + $"departureDate={data.DepartureDate!.Value.Year}%2F{data.DepartureDate!.Value.Month}%2F{data.DepartureDate!.Value.Day}&"
                        + $"deaprtureCity={data.DepartureCity}&"
                        + $"destinationCity={data.DestinationCity}&"
                        + $"minimumPrice={data.MinimalPrice ?? 0}&"
                        + $"maximumPrice={data.MaximalPrice ?? double.MaxValue}";

        var result = await httpClient.GetAsync(query);

        if (result.StatusCode == System.Net.HttpStatusCode.GatewayTimeout)
        {
            await messageService.Error(localizer["TimeoutMessage"]);
            return;
        }

        var sourceFlights = JsonConvert.DeserializeObject<List<FlightDto>>(await result.Content.ReadAsStringAsync());

        foreach (var flight in sourceFlights)
        {
            flights.Add(flight);
        }

        if (!flights.Any())
        {
            await messageService.Info(localizer["NoMatchingFlight"]);
        }

        StateHasChanged();
    }

    private void ClearFlightsListIfAny()
    {
        if (flights.Any())
        {
            flights.Clear();
        }
    }

    private async Task BookFlightsAsync(FlightDto flight)
    {
        var cancellationToken = new CancellationToken();
        await bookingApplicationService.CreateBookingAsync(new CreateBookingDto()
            {
                UserId = currentUser.Id!.Value,
                BookingDate = routeBuilder.DepartureTime!.Value,
                Flight = flight
            }, cancellationToken);
        await notificationService.Success("Booking created", "Success");
    }
}
