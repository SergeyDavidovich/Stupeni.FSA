@page "/booking"
@using Stupeni.FSA.Blazor.Components
@using Stupeni.FSA.Blazor.Models
@using Stupeni.FSA.Booking
@using Stupeni.FSA.Booking.Dto
@using Stupeni.FSA.Flights
@using System.Threading
@using Volo.Abp.AspNetCore.Components.Notifications
@using Volo.Abp.MultiTenancy
@using Stupeni.FSA.Flights.Dto
@using Volo.Abp.Users
@attribute [Authorize]
@inherits FSAComponentBase
@inject ICurrentUser currentUser
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IFlightApplicationService flightApplicationService
@inject IBookingApplicationService bookingApplicationService
@inject IUiNotificationService notificationService

<MudContainer Class="d-flex flex-column align-center gap-4">
    <RouteBuilder @ref="routeBuilder" SearchFlightOnClicked="SearchFlightOnClicked"></RouteBuilder>
    <FlightsBooking Flights="@flights" BookButtonOnClicked="BookFlightsAsync"></FlightsBooking>
</MudContainer>

@code {
    RouteBuilder routeBuilder;
    private List<FlightDto> flights = new List<FlightDto>();

    private async Task SearchFlightOnClicked(BookingData data)
    {
        ClearFlightsListIfAny();

        var cancelationToken = new CancellationToken();

        // Sending new date with +1 day because of ABP problem
        // It is known issue. Read here please - https://support.abp.io/QA/Questions/6011/Different-value-for-DateTime-Picker-and-api-request-parameter
        var sourceFlights = await flightApplicationService.GetFlightsAsync(
            new DateTime(data.DepartureDate!.Value.Year, data.DepartureDate!.Value.Month, data.DepartureDate!.Value.Day + 1),
            data.DepartureCity,
            data.DestinationCity,
            (data.MinimalPrice ?? 0),
            (data.MaximalPrice ?? double.MaxValue),
            cancelationToken);

        foreach (var flight in sourceFlights)
        {
            flights.Add(flight);
        }

        StateHasChanged();
    }

    private void ClearFlightsListIfAny()
    {
        if (flights.Any())
        {
            flights.Clear();
        }
    }

    private async Task BookFlightsAsync(IEnumerable<FlightDto> flights)
    {
        var cancellationToken = new CancellationToken();
        await bookingApplicationService.CreateBookingAsync(new CreateBookingDto()
        {
            UserId = currentUser.Id!.Value,
            BookingDate = routeBuilder.DepartureTime!.Value,
            Flights = flights
        }, cancellationToken);
        await notificationService.Success("Booking created", "Success");
    }
}
